
# #Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. Luego, utiliza esa
# funci√≥n para calcular y mostrar en pantalla el factorial de todos los n√∫meros enteros
# entre 1 y el n√∫mero que indique el usuario
def factorial(n):
    if n <= 1:
        return 1
    return n * factorial(n - 1)

def ejercicio1():
    try:
        numero = int(input("Ingrese un numero entero positivo: "))
        if numero < 1:
            print("El n√∫mero debe ser mayor o igual a 1")
            return
        for i in range(1, numero + 1):
            print(f"Factorial de {i} = {factorial(i)}")
    except ValueError:
        print("Error: Debe ingresar un n√∫mero entero v√°lido")


ejercicio1()

# Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n
# indicada. Posteriormente, muestra la serie completa hasta la posici√≥n que el usuario
# especifique.
def fibonacci(n):
    if n == 0:
        return 0
    if n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)

def ejercicio2():
    try:
        posicion = int(input("Ingrese la posici√≥n hasta donde mostrar la serie: "))
        if posicion < 0:
            print("La posici√≥n debe ser mayor o igual a 0")
            return
        print("Fibonacci: ")
        for i in range(posicion + 1):
            print(fibonacci(i), end=" ")
    except ValueError:
        print("Error: Debe ingresar un n√∫mero entero v√°lido")

ejercicio2()

#  Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un
# exponente, utilizando la f√≥rmula ùëõùëö = ùëõ ‚àó ùëõ(ùëö‚àí1)
# . Prueba esta funci√≥n en un algoritmo general

def potencia(base, exponente):
    if exponente == 0:
        return 1
    return base * potencia(base, exponente - 1)

def ejercicio3():
    try:
        base = int(input("Ingrese la base: "))
        exponente = int(input("Ingrese un exponente entero no negativo: "))
        
        if exponente < 0:
            print("El exponente debe ser mayor o igual a 0")
            return
        
        resultado = potencia(base, exponente)
        print(f"{base}^{exponente} = {resultado}")
    except ValueError:
        print("Error: Debe ingresar n√∫meros enteros v√°lidos")


ejercicio3()

# Crear una funci√≥n recursiva en Python que reciba un n√∫mero entero positivo en base
# decimal y devuelva su representaci√≥n en binario como una cadena de texto.

def decimal_a_binario(n):
    if n == 0:
        return "0"
    return decimal_a_binario(n // 2) + str(n % 2)

def ejercicio4():
    try:
        numero = int(input("Ingrese un numero decimal positivo: "))
        if numero < 0:
            print("El numero debe ser positivo")
            return
        
        if numero == 0:
            binario = "0"
        else:
            binario = decimal_a_binario(numero)
        
        print(f"{numero} en binario es {binario}")
    except ValueError:
        print("Error: Debe ingresar un numero entero valido")


ejercicio4()

# Implement√° una funci√≥n recursiva llamada es_palindromo(palabra) que reciba una
# cadena de texto sin espacios ni tildes, y devuelva True si es un pal√≠ndromo o False si no
# lo es.
def es_palindromo(palabra):
    if len(palabra) <= 1:
        return True
    if palabra[0] != palabra[-1]: #ver si el ultimo y elprimer caracter son iguales
        return False
    return es_palindromo(palabra[1:-1])

def ejercicio5():
    palabra = input("Ingrese una palabra sin espacios ni tildes: ").lower()
    if es_palindromo(palabra):
        print(f"{palabra} ES un palindromo")
    else:
        print(f"{palabra} NO es un palindromo")

ejercicio5()

# Escrib√≠ una funci√≥n recursiva en Python llamada suma_digitos(n) que reciba un
# n√∫mero entero positivo y devuelva la suma de todos sus d√≠gitos
# No se puede convertir el n√∫mero a string.
# Us√° operaciones matem√°ticas (%, //) y recursi√≥n.

def suma_digitos(n):
    if n < 10:
        return n
    return (n % 10) + suma_digitos(n // 10)

def ejercicio6():
    try:
        numero = int(input("Ingrese un n√∫mero entero positivo: "))
        if numero < 0:
            print("El n√∫mero debe ser positivo")
            return
        
        resultado = suma_digitos(numero)
        print(f"La suma de los digitos de {numero} es: {resultado}")
    except ValueError:
        print("Error: Debe ingresar un numero entero valido")

ejercicio6()

# Escrib√≠ una funci√≥n recursiva contar_bloques(n) que reciba el n√∫mero de bloques en el
# nivel m√°s bajo y devuelva el total de bloques que necesita para construir toda la
# pir√°mide.

def contar_bloques(n):
    if n == 1:
        return 1
    return n + contar_bloques(n - 1)

def ejercicio7():
    try:
        nivel_base = int(input("Ingrese el n√∫mero de bloques en el nivel m√°s bajo: "))
        if nivel_base < 1:
            print("El n√∫mero debe ser mayor o igual a 1")
            return
        
        total = contar_bloques(nivel_base)
        print(f"\nTotal de bloques en la pir√°mide: {total}")
    except ValueError:
        print("Error: Debe ingresar un n√∫mero entero v√°lido")

ejercicio7()

# Escrib√≠ una funci√≥n recursiva llamada contar_digito(numero, digito) que reciba un
# n√∫mero entero positivo (numero) y un d√≠gito (entre 0 y 9), y devuelva cu√°ntas veces
# aparece ese d√≠gito dentro del n√∫mero.

def contar_digito(numero, digito):
    if numero == 0:
        return 0
    
    ultimo_digito = numero % 10 # para obtener el √∫ltimo d√≠gito
    if ultimo_digito == digito:
        return 1 + contar_digito(numero // 10, digito)
    else:
        return contar_digito(numero // 10, digito)

def ejercicio8():
    try:
        numero = int(input("Ingrese un numero entero positivo: "))
        digito = int(input("Ingrese el digito a buscar (0-9): "))
        
        if numero < 0:
            print("El numero debe ser positivo")
            return
        
        if digito < 0 or digito > 9:
            print("El digito debe estar entre 0 y 9")
            return
        
        cantidad = contar_digito(numero, digito)
        print(f"El digito {digito} aparece {cantidad} veces en {numero}")
    except ValueError:
        print("Error: Debe ingresar numeros enteros validos")

ejercicio8()